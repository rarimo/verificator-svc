openapi: 3.0.0
info:
  version: 1.0.0
  title: verificator-svc
  description: ''
servers:
  - url: 'https://api.stage.rarime.com'
    description: Rarimo Developer Environment
paths:
  '/integrations/verification-svc/light/private/verification-status/{user_id}':
    get:
      tags:
        - Light User verification
      summary: Get user verification status
      description: |
        Get user verification status by UserID.
      operationId: getUserStatus
      parameters:
        - $ref: '#/components/parameters/pathID'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  '/integrations/verification-svc/private/proof/{user_id}':
    get:
      tags:
        - User verification
      summary: Get verified proof
      description: |
        Get verified proof by userID.
      operationId: getProof
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/GetProof'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  '/integrations/verification-svc/private/verification-status/{user_id}':
    get:
      tags:
        - User verification
      summary: Get user verification status
      description: |
        Get user verification status by UserID.
      operationId: getUserStatus
      parameters:
        - $ref: '#/components/parameters/pathID'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  '/integrations/verification-svc/public/callback/{user_id_hash}':
    post:
      tags:
        - Proof
      summary: Receive Proof by callback(mobile)
      description: It receives the proof for verification by callback url
      operationId: receiveProofByCallback
      parameters:
        - $ref: '#/components/parameters/pathIDHash'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/Proof'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  /integrations/verification-svc/public/proof-parameters:
    get:
      tags:
        - Proof
      summary: Get Proof Parameters(internal)
      description: |
        Get proof parameters for user with provided query parameters(internal, better to use verification links to get proof-parameters).
      operationId: getVerificationParameters
      parameters:
        - $ref: '#/components/parameters/idParam'
        - $ref: '#/components/parameters/typeOfVerificationAgeParam'
        - $ref: '#/components/parameters/typeOfVerificationUniquenessParam'
        - $ref: '#/components/parameters/nationalityParam'
        - $ref: '#/components/parameters/eventIdParam'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Parameters'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  '/integrations/verificator-svc/light/private/user/{user_id}':
    delete:
      tags:
        - Light User verification
      summary: Delete user
      description: |
        Delete user by UserID.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/pathID'
      responses:
        '204':
          description: User deleted
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  /integrations/verificator-svc/light/private/verification-link:
    post:
      tags:
        - Light User verification
      summary: Request verification links for qr-code generation
      description: |
        Requests verification links for user to generate qr-code, returns: get_proof_params.
      operationId: getVerificationLink
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/LinksLight'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  '/integrations/verificator-svc/light/public/callback-sign/{user_id_hash}':
    post:
      tags:
        - Light Signature
      summary: Receive signature and message by callback(mobile)
      description: It receives the signature and message for verification by callback url
      operationId: receiveSignatureByCallback
      parameters:
        - $ref: '#/components/parameters/pathIDHash'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/Signature'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  '/integrations/verificator-svc/light/public/proof-params/{user_id_hash}':
    get:
      tags:
        - Light Signature
      summary: Get Proof Parameters(mobile)
      description: |
        Get proof parameters by userIDHash, returns: proof-params and callback_url.
      operationId: getProofParameters
      parameters:
        - $ref: '#/components/parameters/pathIDHash'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ProofParamsLight'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  '/integrations/verificator-svc/private/user/{user_id}':
    delete:
      tags:
        - User verification
      summary: Delete user
      description: |
        Delete user by UserID.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/pathID'
      responses:
        '204':
          description: User deleted
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  /integrations/verificator-svc/private/verification-link:
    post:
      tags:
        - User verification
      summary: Request verification links for qr-code generation
      description: |
        Requests verification links for user to generate qr-code, returns: get_proof_params.
      operationId: getVerificationLink
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Links'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  '/integrations/verificator-svc/public/proof-params/{user_id_hash}':
    get:
      tags:
        - Proof
      summary: Get Proof Parameters(mobile)
      description: |
        Get proof parameters by userIDHash, returns: proof-params and callback_url.
      operationId: getProofParameters
      parameters:
        - $ref: '#/components/parameters/pathIDHash'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ProofParams'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
components:
  schemas:
    Errors:
      description: 'Standard JSON:API error'
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          description: Non empty array of errors occurred during request processing
          items:
            type: object
            required:
              - title
              - status
            properties:
              title:
                type: string
                description: 'Title is a short, human-readable summary of the problem'
                example: Bad Request
              detail:
                type: string
                description: Detail is a human-readable explanation specific to this occurrence of the problem
                example: Request body was expected
              status:
                type: integer
                description: Status is the HTTP status code applicable to this problem
                example: 400
                enum:
                  - 400
                  - 401
                  - 403
                  - 404
                  - 409
                  - 500
    GetProof:
      allOf:
        - $ref: '#/components/schemas/GetProofKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              required:
                - proof
              properties:
                proof:
                  type: object
                  format: types.ZKProof
                  description: |
                    Query ZK passport verification proof.
    GetProofKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: 18493889724322d9aba2d93238ae60c2638946737bbe8eaecd6e5efdc0b6f4ff
          description: User hash identifier
        type:
          type: string
          enum:
            - get_proof
    Links:
      allOf:
        - $ref: '#/components/schemas/LinksKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              required:
                - get_proof_params
              properties:
                get_proof_params:
                  type: string
                  example: 'https://example.com/integrations/verificator-svc/public/proof-params/c15ad8f88949'
                  description: Returns proof-parameters and callback_url
    LinksKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: 18493889724322d9aba2d93238ae60c2638946737bbe8eaecd6e5efdc0b6f4ff
          description: User hash identifier
        type:
          type: string
          enum:
            - verification_link
    LinksLight:
      allOf:
        - $ref: '#/components/schemas/LinksKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              required:
                - get_proof_params
              properties:
                get_proof_params:
                  type: string
                  example: 'https://example.com/integrations/verificator-svc/light/public/proof-params/c15ad8f88949'
                  description: Returns proof-parameters and callback_url
    Parameters:
      allOf:
        - $ref: '#/components/schemas/ParametersKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - event_id
                - event_data
                - selector
                - identity_counter
                - timestamp_lower_bound
                - timestamp_upper_bound
                - identity_counter_lower_bound
                - identity_counter_upper_bound
                - expiration_date_lower_bound
                - expiration_date_upper_bound
                - birth_date_lower_bound
                - birth_date_upper_bound
                - citizenship_mask
                - callback_url
              properties:
                event_id:
                  type: string
                  example: '134934934030489134341633902189494613533900917417361106374681011849132651019822199'
                event_data:
                  type: string
                  example: '0x28906909b4f974d958f10cf00ff182f8942e75fb57caa1083a942350d6d7c930b'
                selector:
                  type: string
                  example: '27065'
                identity_counter:
                  type: integer
                  example: 0
                timestamp_lower_bound:
                  type: string
                  example: '0'
                timestamp_upper_bound:
                  type: string
                  example: '19000000000'
                identity_counter_lower_bound:
                  type: integer
                  example: 0
                identity_counter_upper_bound:
                  type: integer
                  example: 1
                expiration_date_lower_bound:
                  type: string
                  example: '52983525027888'
                expiration_date_upper_bound:
                  type: string
                  example: '52983525027888'
                birth_date_lower_bound:
                  type: string
                  example: '0x303030303030'
                birth_date_upper_bound:
                  type: string
                  example: '0x303630393032'
                citizenship_mask:
                  type: string
                  example: '0x554B52'
                callback_url:
                  type: string
                  example: 'https://example.com/integrations/verificator-svc/public/receive-proof/callback/c15ad8f88949'
    ParametersKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: user@example.com
          description: 'User identifier (e.g., email, address).'
        type:
          type: string
          enum:
            - proof_parameters
    Proof:
      allOf:
        - $ref: '#/components/schemas/ProofKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              required:
                - proof
              properties:
                proof:
                  type: object
                  format: types.ZKProof
                  description: |
                    Query ZK passport verification proof.
    ProofKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: 18493889724322d9aba2d93238ae60c2638946737bbe8eaecd6e5efdc0b6f4ff
          description: User hash identifier
        type:
          type: string
          enum:
            - receive_proof
    ProofParams:
      allOf:
        - $ref: '#/components/schemas/ProofParamsKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - event_id
                - event_data
                - selector
                - identity_counter
                - timestamp_lower_bound
                - timestamp_upper_bound
                - identity_counter_lower_bound
                - identity_counter_upper_bound
                - expiration_date_lower_bound
                - expiration_date_upper_bound
                - birth_date_lower_bound
                - birth_date_upper_bound
                - citizenship_mask
              properties:
                event_id:
                  type: string
                  example: '134934934030489134341633902189494613533900917417361106374681011849132651019822199'
                event_data:
                  type: string
                  example: '0x28906909b4f974d958f10cf00ff182f8942e75fb57caa1083a942350d6d7c930b'
                selector:
                  type: string
                  example: '27065'
                identity_counter:
                  type: integer
                  example: 0
                timestamp_lower_bound:
                  type: string
                  example: '0'
                timestamp_upper_bound:
                  type: string
                  example: '19000000000'
                identity_counter_lower_bound:
                  type: integer
                  example: 0
                identity_counter_upper_bound:
                  type: integer
                  example: 1
                expiration_date_lower_bound:
                  type: string
                  example: '52983525027888'
                expiration_date_upper_bound:
                  type: string
                  example: '52983525027888'
                birth_date_lower_bound:
                  type: string
                  example: '0x303030303030'
                birth_date_upper_bound:
                  type: string
                  example: '0x303630393032'
                citizenship_mask:
                  type: string
                  example: '0x554B52'
                callback_url:
                  type: string
                  example: 'https://example.com/integrations/verificator-svc/public/callback/c15ad8f88949'
    ProofParamsKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: user@example.com
          description: 'User identifier (e.g., email, address).'
        type:
          type: string
          enum:
            - get_proof_params
    ProofParamsLight:
      allOf:
        - $ref: '#/components/schemas/ProofParamsKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - event_id
                - event_data
                - selector
                - identity_counter
                - timestamp_lower_bound
                - timestamp_upper_bound
                - identity_counter_lower_bound
                - identity_counter_upper_bound
                - expiration_date_lower_bound
                - expiration_date_upper_bound
                - birth_date_lower_bound
                - birth_date_upper_bound
                - citizenship_mask
              properties:
                event_id:
                  type: string
                  example: '134934934030489134341633902189494613533900917417361106374681011849132651019822199'
                event_data:
                  type: string
                  example: '0x28906909b4f974d958f10cf00ff182f8942e75fb57caa1083a942350d6d7c930b'
                selector:
                  type: string
                  example: '27065'
                identity_counter:
                  type: integer
                  example: 0
                timestamp_lower_bound:
                  type: string
                  example: '0'
                timestamp_upper_bound:
                  type: string
                  example: '19000000000'
                identity_counter_lower_bound:
                  type: integer
                  example: 0
                identity_counter_upper_bound:
                  type: integer
                  example: 1
                expiration_date_lower_bound:
                  type: string
                  example: '52983525027888'
                expiration_date_upper_bound:
                  type: string
                  example: '52983525027888'
                birth_date_lower_bound:
                  type: string
                  example: '0x303030303030'
                birth_date_upper_bound:
                  type: string
                  example: '0x303630393032'
                citizenship_mask:
                  type: string
                  example: '0x554B52'
                callback_url:
                  type: string
                  example: 'https://example.com/integrations/verificator-svc/light/public/callback-sign/c15ad8f88949'
    Signature:
      allOf:
        - $ref: '#/components/schemas/SignatureKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              required:
                - signature
              properties:
                signature:
                  type: string
                  example: a079d249635fd884371dab4065f65bc36668d79787f005c9c56a574bf08ee51450c3ce98dcfc490ad049db8683cc02d8edbe8281e95077d1393b51a7d283031a01
                  description: 'Signature, must be len(signature) == 64'
    SignatureKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: '0x18493889724322d9aba2d93238ae60c2638946737bbe8eaecd6e5efdc0b6f4ff'
          description: User hash identifier
        type:
          type: string
          enum:
            - receive_signature
    Status:
      allOf:
        - $ref: '#/components/schemas/StatusKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - not_verified
                    - verified
                    - failed_verification
                    - uniqueness_check_failed
    StatusKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: user@example.com
          description: 'User identifier (e.g., email, address).'
        type:
          type: string
          enum:
            - user_status
    User:
      allOf:
        - $ref: '#/components/schemas/UserKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              properties:
                age_lower_bound:
                  type: integer
                  example: 18
                  description: Lower user age limit
                uniqueness:
                  type: boolean
                  example: true
                  description: Parameters for checking user uniqueness
                nationality:
                  type: string
                  example: UKR
                  description: User nationality
                event_id:
                  type: string
                  example: '2234556494903931186902189494613533900917417361106374681011849132651019822199'
                  description: Event ID of event
                sex:
                  type: boolean
                  example: true
                  description: Enable verification of sex param
    UserKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: example@example.com
          description: 'User identifier (e.g., email, address).'
        type:
          type: string
          enum:
            - user
  responses:
    internalError:
      description: Internal server error
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    invalidParameter:
      description: One of the parameters is invalid. Refer to the response body for details.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    notFound:
      description: Requested resource does not exist.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
  parameters:
    eventIdParam:
      in: query
      name: event_id
      required: false
      description: Event ID
      example: '2234556494903931186902189494613533900917417361106374681011849132651019822199'
      schema:
        type: string
        format: string
    idParam:
      in: query
      name: user_id
      required: true
      description: 'User identifier (e.g., email, address).'
      example: user@example.com
      schema:
        type: string
        format: string
    nationalityParam:
      in: query
      name: nationality
      required: true
      description: Type of verification nationality
      example: UKR
      schema:
        type: string
    pageLimitParam:
      in: query
      name: 'page[limit]'
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 15
        description: Numbers of items per page to return.
    pageNumberParam:
      in: query
      name: 'page[number]'
      required: false
      schema:
        type: integer
      description: The number of a page to return.
    pageOrder:
      in: query
      name: 'page[order]'
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
        description: 'Order of records on the page. If sortingParam is not specified, order of records is by default sorted by ID.'
    pathID:
      in: path
      name: user_id
      required: true
      description: 'User identifier (e.g., email, address).'
      example: user@example.com
      schema:
        type: string
        fomat: string
    pathIDHash:
      in: path
      name: user_id_hash
      required: true
      example: '0x384734934386483457309437583757364283'
      schema:
        type: string
        fomat: string
    typeOfVerificationAgeParam:
      in: query
      name: age_lower_bound
      required: true
      description: Type of verification age
      example: 18
      schema:
        type: integer
    typeOfVerificationUniquenessParam:
      in: query
      name: uniqueness
      required: true
      description: Type of verification uniqueness
      example: 'true'
      schema:
        type: boolean
